[
    {
        "id": 0,
        "code": "def install_translator(qapp):\n global QT_TRANSLATOR\n if (QT_TRANSLATOR is None):\n  qt_translator = QTranslator()\n  if qt_translator.load(('qt_' + QLocale.system().name()), QLibraryInfo.location(QLibraryInfo.TranslationsPath)):\n   QT_TRANSLATOR = qt_translator\n if (QT_TRANSLATOR is not None):\n  qapp.installTranslator(QT_TRANSLATOR)",
        "text": "install qt translator to the qapplication instance ."
    },
    {
        "id": 1,
        "code": "def delete_dhcp_options(dhcp_options_id=None, dhcp_options_name=None, region=None, key=None, keyid=None, profile=None):\n return _delete_resource(resource='dhcp_options', name=dhcp_options_name, resource_id=dhcp_options_id, region=region, key=key, keyid=keyid, profile=profile)",
        "text": "delete dhcp options by id or name ."
    },
    {
        "id": 2,
        "code": "def test_depth_first_mro():\n class A(object, ):\n  pass\n class B(A, ):\n  pass\n class C(A, ):\n  pass\n class D(B, C, ):\n  pass\n class E(D, object, ):\n  pass\n class G(object, ):\n  pass\n class H(G, ):\n  pass\n class I(G, ):\n  pass\n class K(H, I, object, ):\n  pass\n class L(K, E, ):\n  pass\n AreEqual(L.__mro__, (L, K, H, I, G, E, D, B, C, A, object))",
        "text": "w/o old-style ."
    },
    {
        "id": 3,
        "code": "def test_pprint_npfloat32():\n dat = np.array([1.0, 2.0], dtype=np.float32)\n t = Table([dat], names=['a'])\n t['a'].format = '5.2f'\n assert (str(t['a']) == '  a   -----  1.00  2.00')",
        "text": "test for #148 ."
    },
    {
        "id": 4,
        "code": "def _wait_until_running(instance):\n with start_action(action_type=u'flocker:provision:aws:wait_until_running', instance_id=instance.id) as context:\n  _poll_while((lambda : _node_is_booting(instance)), repeat(1, INSTANCE_TIMEOUT))\n  context.add_success_fields(instance_state=instance.state)\n  context.add_success_fields(instance_state_reason=instance.state_reason)\n if (instance.state != u'running'):\n  raise FailedToRun(instance.state_reason)",
        "text": "wait until a instance is running ."
    },
    {
        "id": 5,
        "code": "def ccovf(x, y, unbiased=True, demean=True):\n n = len(x)\n if demean:\n  xo = (x - x.mean())\n  yo = (y - y.mean())\n else:\n  xo = x\n  yo = y\n if unbiased:\n  xi = np.ones(n)\n  d = np.correlate(xi, xi, 'full')\n else:\n  d = n\n return (np.correlate(xo, yo, 'full') / d)[(n - 1):]",
        "text": "crosscovariance for 1d parameters x ."
    },
    {
        "id": 6,
        "code": "def _guess_autoescape(template_name):\n if ((template_name is None) or ('.' not in template_name)):\n  return False\n ext = template_name.rsplit('.', 1)[1]\n return (ext in ['html', 'htm', 'xml'])",
        "text": "turn auto-escape on/off based on the file type ."
    },
    {
        "id": 7,
        "code": "def flatten(struct):\n if (struct is None):\n  return []\n flat = []\n if isinstance(struct, dict):\n  for (_, result) in six.iteritems(struct):\n   flat += flatten(result)\n  return flat\n if isinstance(struct, six.string_types):\n  return [struct]\n try:\n  iterator = iter(struct)\n except TypeError:\n  return [struct]\n for result in iterator:\n  flat += flatten(result)\n return flat",
        "text": "creates a flat list of all all items in structured output : ."
    },
    {
        "id": 8,
        "code": "@task\ndef setup(ctx):\n copy_settings(ctx, addons=True)\n packages(ctx)\n requirements(ctx, addons=True, dev=True)\n build_js_config_files(ctx)\n assets(ctx, dev=True, watch=False)",
        "text": "creates local settings ."
    },
    {
        "id": 9,
        "code": "def get_name(name_or_obj):\n if isinstance(name_or_obj, six.string_types):\n  return name_or_obj\n try:\n  return name_or_obj.name\n except AttributeError:\n  raise exc.MissingName(name_or_obj)",
        "text": "returns the name attribute of name_or_obj if present; if not ."
    },
    {
        "id": 10,
        "code": "def claModelControlDisableTPLearningCb(claModel):\n assert isinstance(claModel, CLAModel)\n claModel._getTPRegion().setParameter('learningMode', False)\n return",
        "text": "disables learning in the cla models temporal pooler ."
    },
    {
        "id": 11,
        "code": "def _point_along_a_line(x0, y0, x1, y1, d):\n (dx, dy) = ((x0 - x1), (y0 - y1))\n ff = (d / (((dx * dx) + (dy * dy)) ** 0.5))\n (x2, y2) = ((x0 - (ff * dx)), (y0 - (ff * dy)))\n return (x2, y2)",
        "text": "find a point along a line connecting  --  whose distance from  is d ."
    },
    {
        "id": 12,
        "code": "def delete_policy(vhost, name, runas=None):\n if ((runas is None) and (not salt.utils.is_windows())):\n  runas = salt.utils.get_user()\n res = __salt__['cmd.run_all']([__context__['rabbitmqctl'], 'clear_policy', '-p', vhost, name], runas=runas, python_shell=False)\n log.debug('Delete policy: {0}'.format(res['stdout']))\n return _format_response(res, 'Deleted')",
        "text": "delete a policy based on rabbitmqctl clear_policy ."
    },
    {
        "id": 13,
        "code": "def del_job_files(job_paths):\n for path in job_paths:\n  if (path and clip_path(path).lower().startswith(cfg.download_dir.get_path().lower())):\n   remove_all(path, recursive=True)",
        "text": "remove files of each path in the list ."
    },
    {
        "id": 14,
        "code": "def showwarning(message, category, filename, lineno, file=None):\n if (file is None):\n  file = sys.stderr\n try:\n  file.write(formatwarning(message, category, filename, lineno))\n except IOError:\n  pass",
        "text": "hook to write a warning to a file; replace if you like ."
    },
    {
        "id": 15,
        "code": "def read(handle, format):\n format = format.lower()\n motifs = parse(handle, format)\n if (len(motifs) == 0):\n  raise ValueError('No motifs found in handle')\n if (len(motifs) > 1):\n  raise ValueError('More than one motif found in handle')\n motif = motifs[0]\n return motif",
        "text": "reads a motif from a handle using a specified file-format ."
    },
    {
        "id": 16,
        "code": "def _inFilesystemNamespace(path):\n return (path[:1] != '\\x00')",
        "text": "determine whether the given unix socket path is in a filesystem namespace ."
    },
    {
        "id": 17,
        "code": "def create_dendrogram(X, orientation='bottom', labels=None, colorscale=None, distfun=None, linkagefun=(lambda x: sch.linkage(x, 'complete'))):\n if ((not scp) or (not scs) or (not sch)):\n  raise ImportError('FigureFactory.create_dendrogram requires scipy,                             scipy.spatial and scipy.hierarchy')\n s = X.shape\n if (len(s) != 2):\n  exceptions.PlotlyError('X should be 2-dimensional array.')\n if (distfun is None):\n  distfun = scs.distance.pdist\n dendrogram = _Dendrogram(X, orientation, labels, colorscale, distfun=distfun, linkagefun=linkagefun)\n return {'layout': dendrogram.layout, 'data': dendrogram.data}",
        "text": "beta function that returns a dendrogram plotly figure object ."
    },
    {
        "id": 18,
        "code": "def branch_list(remote=False):\n if remote:\n  return for_each_ref_basename(u'refs/remotes')\n else:\n  return for_each_ref_basename(u'refs/heads')",
        "text": "return a list of local or remote branches this explicitly removes head from the list of remote branches ."
    },
    {
        "id": 19,
        "code": "def select_command(corrected_commands):\n try:\n  selector = CommandSelector(corrected_commands)\n except NoRuleMatched:\n  logs.failed('No fucks given')\n  return\n if (not settings.require_confirmation):\n  logs.show_corrected_command(selector.value)\n  return selector.value\n logs.confirm_text(selector.value)\n for action in read_actions():\n  if (action == const.ACTION_SELECT):\n   sys.stderr.write(' ')\n   return selector.value\n  elif (action == const.ACTION_ABORT):\n   logs.failed(' Aborted')\n   return\n  elif (action == const.ACTION_PREVIOUS):\n   selector.previous()\n   logs.confirm_text(selector.value)\n  elif (action == const.ACTION_NEXT):\n   selector.next()\n   logs.confirm_text(selector.value)",
        "text": "returns: - the first command when confirmation disabled; - none when ctrl+c pressed; - selected command ."
    },
    {
        "id": 20,
        "code": "def submit_rescore_entrance_exam_for_student(request, usage_key, student=None, only_if_higher=False):\n check_entrance_exam_problems_for_rescoring(usage_key)\n task_type = ('rescore_problem_if_higher' if only_if_higher else 'rescore_problem')\n task_class = rescore_problem\n (task_input, task_key) = encode_entrance_exam_and_student_input(usage_key, student)\n task_input.update({'only_if_higher': only_if_higher})\n return submit_task(request, task_type, task_class, usage_key.course_key, task_input, task_key)",
        "text": "request entrance exam problems to be re-scored as a background task ."
    },
    {
        "id": 21,
        "code": "def floating_ip_list(call=None):\n if (call != 'function'):\n  raise SaltCloudSystemExit('The floating_ip_list action must be called with -f or --function')\n conn = get_conn()\n return conn.floating_ip_list()",
        "text": "list floating ips ."
    },
    {
        "id": 22,
        "code": "def testOnSequenceData(module, dataset):\n target = dataset.getField('target')\n output = ModuleValidator.calculateModuleOutput(module, dataset)\n ends = SequenceHelper.getSequenceEnds(dataset)\n summed_output = zeros(dataset.outdim)\n class_output = []\n class_target = []\n for j in range(len(output)):\n  summed_output += output[j]\n  if (j in ends):\n   class_output.append(argmax(summed_output))\n   class_target.append(argmax(target[j]))\n   summed_output = zeros(dataset.outdim)\n class_output = array(class_output)\n class_target = array(class_target)\n return Validator.classificationPerformance(class_output, class_target)",
        "text": "fetch targets and calculate the modules output on dataset ."
    },
    {
        "id": 23,
        "code": "def synchronous(tlockname):\n def _synched(func):\n  @wraps(func)\n  def _synchronizer(self, *args, **kwargs):\n   tlock = getattr(self, tlockname)\n   logger.debug(('acquiring lock %r for %s' % (tlockname, func.__name__)))\n   with tlock:\n    logger.debug(('acquired lock %r for %s' % (tlockname, func.__name__)))\n    result = func(self, *args, **kwargs)\n    logger.debug(('releasing lock %r for %s' % (tlockname, func.__name__)))\n    return result\n  return _synchronizer\n return _synched",
        "text": "a decorator to place an instance-based lock around a method ."
    },
    {
        "id": 24,
        "code": "def _has_required_botocore():\n if (not HAS_BOTO):\n  return False\n elif (LooseVersion(botocore.__version__) < LooseVersion(required_botocore_version)):\n  return False\n else:\n  return True",
        "text": "returns true/false boolean depending on if botocore supports usage plan ."
    },
    {
        "id": 25,
        "code": "def per_cpu_times():\n ret = []\n for (user, system, idle, interrupt, dpc) in cext.per_cpu_times():\n  item = scputimes(user, system, idle, interrupt, dpc)\n  ret.append(item)\n return ret",
        "text": "return system per-cpu times as a list of named tuples ."
    },
    {
        "id": 26,
        "code": "def _run_aws(cmd, region, opts, user, **kwargs):\n receipthandle = kwargs.pop('receipthandle', None)\n if receipthandle:\n  kwargs['receipt-handle'] = receipthandle\n num = kwargs.pop('num', None)\n if num:\n  kwargs['max-number-of-messages'] = num\n _formatted_args = ['--{0} \"{1}\"'.format(k, v) for (k, v) in six.iteritems(kwargs)]\n cmd = 'aws sqs {cmd} {args} {region} {out}'.format(cmd=cmd, args=' '.join(_formatted_args), region=_region(region), out=_OUTPUT)\n rtn = __salt__['cmd.run'](cmd, runas=user, python_shell=False)\n return (json.loads(rtn) if rtn else '')",
        "text": "runs the given command against aws ."
    },
    {
        "id": 27,
        "code": "def mkhead(repo, path):\n return git.Head(repo, git.Head.to_full_path(path))",
        "text": ":return: new branch/head instance ."
    },
    {
        "id": 28,
        "code": "def config_option_show(context, data_dict):\n return {'success': False}",
        "text": "show runtime-editable configuration option ."
    },
    {
        "id": 29,
        "code": "def strategy_saturation_largest_first(G, colors):\n distinct_colors = {v: set() for v in G}\n for i in range(len(G)):\n  if (i == 0):\n   node = max(G, key=G.degree)\n   (yield node)\n   for v in G[node]:\n    distinct_colors[v].add(0)\n  else:\n   saturation = {v: len(c) for (v, c) in distinct_colors.items() if (v not in colors)}\n   node = max(saturation, key=(lambda v: (saturation[v], G.degree(v))))\n   (yield node)\n   color = colors[node]\n   for v in G[node]:\n    distinct_colors[v].add(color)",
        "text": "iterates over all the nodes of g in saturation order ."
    },
    {
        "id": 30,
        "code": "def negotiate_locale(preferred, available, sep='_', aliases=LOCALE_ALIASES):\n available = [a.lower() for a in available if a]\n for locale in preferred:\n  ll = locale.lower()\n  if (ll in available):\n   return locale\n  if aliases:\n   alias = aliases.get(ll)\n   if alias:\n    alias = alias.replace('_', sep)\n    if (alias.lower() in available):\n     return alias\n  parts = locale.split(sep)\n  if ((len(parts) > 1) and (parts[0].lower() in available)):\n   return parts[0]\n return None",
        "text": "find the best match between available and requested locale strings ."
    },
    {
        "id": 31,
        "code": "def test_discretize_callable_1d():\n def f(x):\n  return (x ** 2)\n y = discretize_model(f, ((-5), 6))\n assert_allclose(y, (np.arange((-5), 6) ** 2))",
        "text": "test discretize when a 1d function is passed ."
    },
    {
        "id": 32,
        "code": "def make_auth_headers():\n if (not os.path.exists('.appveyor.token')):\n  raise RuntimeError('Please create a file named `.appveyor.token` in the current directory. You can get the token from https://ci.appveyor.com/api-token')\n with open('.appveyor.token') as f:\n  token = f.read().strip()\n headers = {'Authorization': 'Bearer {}'.format(token)}\n return headers",
        "text": "make the authentication headers needed to use the appveyor api ."
    },
    {
        "id": 33,
        "code": "@RegisterWithArgChecks(name='neighbor.get', req_args=[neighbors.IP_ADDRESS])\ndef get_neighbor_conf(neigh_ip_address):\n neigh_conf = _get_neighbor_conf(neigh_ip_address)\n return neigh_conf.settings",
        "text": "returns a neighbor configuration for given ip address if exists ."
    },
    {
        "id": 34,
        "code": "def background(im, size, background=None, **kwargs):\n if (not background):\n  return im\n if ((not size[0]) or (not size[1])):\n  return im\n (x, y) = im.size\n if ((x >= size[0]) and (y >= size[1])):\n  return im\n im = colorspace(im, replace_alpha=background, **kwargs)\n new_im = Image.new('RGB', size, background)\n if (new_im.mode != im.mode):\n  new_im = new_im.convert(im.mode)\n offset = (((size[0] - x) // 2), ((size[1] - y) // 2))\n new_im.paste(im, offset)\n return new_im",
        "text": "add borders of a certain color to make the resized image fit exactly within the dimensions given ."
    },
    {
        "id": 35,
        "code": "def add_status_query_managers(sender, **kwargs):\n if (not issubclass(sender, StatusModel)):\n  return\n for (value, display) in getattr(sender, u'STATUS', ()):\n  try:\n   sender._meta.get_field(value)\n   raise ImproperlyConfigured((u\"StatusModel: Model '%s' has a field named '%s' which conflicts with a status of the same name.\" % (sender.__name__, value)))\n  except FieldDoesNotExist:\n   pass\n  sender.add_to_class(value, QueryManager(status=value))",
        "text": "add a querymanager for each status item dynamically ."
    },
    {
        "id": 36,
        "code": "def virtual_interface_list(name, **kwargs):\n conn = get_conn()\n return conn.virtual_interface_list(name)",
        "text": "create private networks ."
    },
    {
        "id": 37,
        "code": "def expandvars(path):\n global _varprog\n if ('$' not in path):\n  return path\n if (not _varprog):\n  import re\n  _varprog = re.compile('\\\\$(\\\\w+|\\\\{[^}]*\\\\})')\n i = 0\n while True:\n  m = _varprog.search(path, i)\n  if (not m):\n   break\n  (i, j) = m.span(0)\n  name = m.group(1)\n  if (name.startswith('{') and name.endswith('}')):\n   name = name[1:(-1)]\n  if (name in os.environ):\n   tail = path[j:]\n   path = (path[:i] + os.environ[name])\n   i = len(path)\n   path += tail\n  else:\n   i = j\n return path",
        "text": "expand shell variables of form $var and ${var} ."
    },
    {
        "id": 38,
        "code": "def get_variable_values_sorted(variable):\n if variable.is_continuous:\n  return []\n try:\n  return sorted(variable.values, key=int)\n except ValueError:\n  return variable.values",
        "text": "return a list of sorted values for given attribute ."
    },
    {
        "id": 39,
        "code": "def voronoi_cells(G, center_nodes, weight='weight'):\n paths = nx.multi_source_dijkstra_path(G, center_nodes, weight=weight)\n nearest = {v: p[0] for (v, p) in paths.items()}\n cells = groups(nearest)\n unreachable = (set(G) - set(nearest))\n if unreachable:\n  cells['unreachable'] = unreachable\n return cells",
        "text": "returns the voronoi cells centered at center_nodes with respect to the shortest-path distance metric ."
    },
    {
        "id": 40,
        "code": "def find_variables(data, include_named=True):\n found = set()\n def f(val):\n  if (not isinstance(val, basestring)):\n   return\n  for match in Template.pattern.finditer(val):\n   name = ((include_named and match.group('named')) or match.group('braced'))\n   if (name is not None):\n    found.add(name)\n recursive_walk(f, data)\n return found",
        "text": "finds all substitutable variables ."
    },
    {
        "id": 41,
        "code": "def getElementsByLocalName(childNodes, localName):\n elementsByLocalName = getChildElementsByLocalName(childNodes, localName)\n for childNode in childNodes:\n  if (childNode.getNodeType() == 1):\n   elementsByLocalName += childNode.getElementsByLocalName(localName)\n return elementsByLocalName",
        "text": "get the descendents which have the given local name ."
    },
    {
        "id": 42,
        "code": "def database_exists(name):\n with settings(hide('running', 'stdout', 'stderr', 'warnings'), warn_only=True):\n  return _run_as_pg(('psql -d %(name)s -c \"\"' % locals())).succeeded",
        "text": "check if a postgresql database exists ."
    },
    {
        "id": 43,
        "code": "def splitdrive(p):\n if (len(p) > 1):\n  normp = p.replace(altsep, sep)\n  if ((normp[0:2] == (sep * 2)) and (normp[2] != sep)):\n   index = normp.find(sep, 2)\n   if (index == (-1)):\n    return ('', p)\n   index2 = normp.find(sep, (index + 1))\n   if (index2 == (index + 1)):\n    return ('', p)\n   if (index2 == (-1)):\n    index2 = len(p)\n   return (p[:index2], p[index2:])\n  if (normp[1] == ':'):\n   return (p[:2], p[2:])\n return ('', p)",
        "text": "split a pathname into drive/unc sharepoint and relative path specifiers ."
    },
    {
        "id": 44,
        "code": "def get_integration_manager():\n global _integration_manager\n if (not _integration_manager):\n  from reviewboard.integrations.models import IntegrationConfig\n  _integration_manager = IntegrationManager(IntegrationConfig)\n return _integration_manager",
        "text": "return the integration manager for review board ."
    },
    {
        "id": 45,
        "code": "def _GetLines(line_strings):\n lines = []\n for line_string in line_strings:\n  line = list(map(int, line_string.split('-', 1)))\n  if (line[0] < 1):\n   raise errors.YapfError(('invalid start of line range: %r' % line))\n  if (line[0] > line[1]):\n   raise errors.YapfError('end comes before start in line range: %r', line)\n  lines.append(tuple(line))\n return lines",
        "text": "parses the start and end lines from a line string like start-end ."
    },
    {
        "id": 46,
        "code": "def singleton(cls):\n _instances = {}\n def get_instance(*args, **kwargs):\n  if (cls not in _instances):\n   _instances[cls] = cls(*args, **kwargs)\n  return _instances[cls]\n return get_instance",
        "text": "from pep-318 url ."
    },
    {
        "id": 47,
        "code": "def _checkNetaddrWorksWithPrefixlen(net, prefixlen, version):\n if ((net & _prefixlenToNetmask(prefixlen, version)) == net):\n  return 1\n else:\n  return 0",
        "text": "check if a base addess of e network is compatible with a prefixlen ."
    },
    {
        "id": 48,
        "code": "@require_global_staff\n@require_POST\ndef enable_certificate_generation(request, course_id=None):\n course_key = CourseKey.from_string(course_id)\n is_enabled = (request.POST.get('certificates-enabled', 'false') == 'true')\n certs_api.set_cert_generation_enabled(course_key, is_enabled)\n return redirect(_instructor_dash_url(course_key, section='certificates'))",
        "text": "enable/disable self-generated certificates for a course ."
    },
    {
        "id": 49,
        "code": "def patch_os():\n patch_module('os')",
        "text": "replace :func:os ."
    },
    {
        "id": 50,
        "code": "def set_diff_chunk_generator_class(renderer):\n assert renderer\n globals()[u'_generator'] = renderer",
        "text": "sets the diffchunkgenerator class used for generating chunks ."
    },
    {
        "id": 51,
        "code": "def trim_line(line, column=0):\n line = line.strip(u' ')\n ll = len(line)\n if (ll <= 150):\n  return line\n if (column > ll):\n  column = ll\n start = max((column - 60), 0)\n if (start < 5):\n  start = 0\n end = min((start + 140), ll)\n if (end > (ll - 5)):\n  end = ll\n if (end == ll):\n  start = max((end - 140), 0)\n line = line[start:end]\n if (end < ll):\n  line += u' {snip}'\n if (start > 0):\n  line = (u'{snip} ' + line)\n return line",
        "text": "trims a line down to a goal of 140 characters ."
    },
    {
        "id": 52,
        "code": "def get_preferred_submodules():\n if ('submodules' in modules_db):\n  return modules_db['submodules']\n mods = ['numpy', 'scipy', 'sympy', 'pandas', 'networkx', 'statsmodels', 'matplotlib', 'sklearn', 'skimage', 'mpmath', 'os', 'PIL', 'OpenGL', 'array', 'audioop', 'binascii', 'cPickle', 'cStringIO', 'cmath', 'collections', 'datetime', 'errno', 'exceptions', 'gc', 'imageop', 'imp', 'itertools', 'marshal', 'math', 'mmap', 'msvcrt', 'nt', 'operator', 'parser', 'rgbimg', 'signal', 'strop', 'sys', 'thread', 'time', 'wx', 'xxsubtype', 'zipimport', 'zlib', 'nose', 'PyQt4', 'PySide', 'os.path']\n submodules = []\n for m in mods:\n  submods = get_submodules(m)\n  submodules += submods\n modules_db['submodules'] = submodules\n return submodules",
        "text": "get all submodules of the main scientific modules and others of our interest ."
    },
    {
        "id": 53,
        "code": "@task\ndef mongorestore(ctx, path, drop=False):\n db = settings.DB_NAME\n port = settings.DB_PORT\n cmd = 'mongorestore --db {db} --port {port}'.format(db=db, port=port, pty=True)\n if settings.DB_USER:\n  cmd += ' --username {0}'.format(settings.DB_USER)\n if settings.DB_PASS:\n  cmd += ' --password {0}'.format(settings.DB_PASS)\n if drop:\n  cmd += ' --drop'\n cmd += (' ' + path)\n ctx.run(cmd, echo=True)",
        "text": "restores the running osf database with the contents of the database at the location given its argument ."
    },
    {
        "id": 54,
        "code": "@register.tag\ndef firstof(parser, token):\n bits = token.split_contents()[1:]\n asvar = None\n if (len(bits) < 1):\n  raise TemplateSyntaxError(\"'firstof' statement requires at least one argument\")\n if ((len(bits) >= 2) and (bits[(-2)] == 'as')):\n  asvar = bits[(-1)]\n  bits = bits[:(-2)]\n return FirstOfNode([parser.compile_filter(bit) for bit in bits], asvar)",
        "text": "outputs the first variable passed that is not false ."
    },
    {
        "id": 55,
        "code": "def recover(request, uidb64=None, token=None):\n UserModel = get_user_model()\n try:\n  uid = force_text(urlsafe_base64_decode(uidb64))\n  user = UserModel._default_manager.get(pk=uid)\n except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):\n  user = None\n if (user and default_token_generator.check_token(user, token)):\n  temp_pwd = uuid.uuid4().hex\n  user.set_password(temp_pwd)\n  user.save()\n  user = authenticate(username=user.username, password=temp_pwd)\n  user.set_unusable_password()\n  user.save()\n  login(request, user)\n  return redirect('users.recover_done')\n return render(request, 'users/recover_failed.html')",
        "text": "login via an account recovery link ."
    },
    {
        "id": 56,
        "code": "def test_ada_fit():\n ada = ADASYN(random_state=RND_SEED)\n ada.fit(X, Y)\n assert_equal(ada.min_c_, 0)\n assert_equal(ada.maj_c_, 1)\n assert_equal(ada.stats_c_[0], 8)\n assert_equal(ada.stats_c_[1], 12)",
        "text": "test the fitting method ."
    },
    {
        "id": 57,
        "code": "@register.simple_tag\ndef static(path):\n return staticfiles_storage.url(path)",
        "text": "a template tag that returns the url to a file using staticfiles storage backend ."
    },
    {
        "id": 58,
        "code": "def initialize_coverage(args):\n if args.delegate:\n  raise Delegate()\n if args.requirements:\n  install_command_requirements(args)\n try:\n  import coverage\n except ImportError:\n  coverage = None\n if (not coverage):\n  raise ApplicationError('You must install the \"coverage\" python module to use this command.')\n return coverage",
        "text": ":type args: coverageconfig :rtype: coverage ."
    },
    {
        "id": 59,
        "code": "@task\n@cmdopts([('name=', 'n', 'Run specific tests.')])\ndef test_integration(options):\n _reset()\n call_task('start_geoserver')\n info('GeoNode is now available, running the tests now.')\n name = options.get('name', 'geonode.tests.integration')\n success = False\n try:\n  if (name == 'geonode.tests.csw'):\n   call_task('start')\n   sh('sleep 30')\n   call_task('setup_data')\n  sh(('python manage.py test %s --noinput --liveserver=localhost:8000' % name))\n except BuildFailure as e:\n  info(('Tests failed! %s' % str(e)))\n else:\n  success = True\n finally:\n  stop()\n _reset()\n if (not success):\n  sys.exit(1)",
        "text": "run geonodes integration test suite against the external apps ."
    },
    {
        "id": 60,
        "code": "def get_can_enable_ldap():\n if has_module(u'ldap'):\n  return (True, None)\n else:\n  return (False, _(u'LDAP authentication requires the python-ldap library, which is not installed.'))",
        "text": "check whether ldap authentication can be enabled ."
    },
    {
        "id": 61,
        "code": "def insert_hyphens(node, hyphenator):\n textattrs = (u'text', u'tail')\n if isinstance(node, lxml.etree._Entity):\n  textattrs = (u'tail',)\n for attr in textattrs:\n  text = getattr(node, attr)\n  if (not text):\n   continue\n  new_data = u' '.join([hyphenator.inserted(w, hyphen=u'\\xad') for w in text.split(u' ')])\n  if text[0].isspace():\n   new_data = (u' ' + new_data)\n  if text[(-1)].isspace():\n   new_data += u' '\n  setattr(node, attr, new_data)\n for child in node.iterchildren():\n  insert_hyphens(child, hyphenator)",
        "text": "insert hyphens into a node ."
    },
    {
        "id": 62,
        "code": "@register.filter\ndef display_url(url):\n url = force_bytes(url, errors='replace')\n return urllib.unquote(url).decode('utf-8', errors='replace')",
        "text": "display a url like the browser url bar would ."
    },
    {
        "id": 63,
        "code": "def generative_network(z):\n with slim.arg_scope([slim.conv2d_transpose], activation_fn=tf.nn.elu, normalizer_fn=slim.batch_norm, normalizer_params={'scale': True}):\n  net = tf.reshape(z, [M, 1, 1, d])\n  net = slim.conv2d_transpose(net, 128, 3, padding='VALID')\n  net = slim.conv2d_transpose(net, 64, 5, padding='VALID')\n  net = slim.conv2d_transpose(net, 32, 5, stride=2)\n  net = slim.conv2d_transpose(net, 1, 5, stride=2, activation_fn=None)\n  net = slim.flatten(net)\n  return net",
        "text": "generative network to parameterize generative model ."
    },
    {
        "id": 64,
        "code": "def find_dynamicsymbols(expression, exclude=None):\n t_set = {dynamicsymbols._t}\n if exclude:\n  if iterable(exclude):\n   exclude_set = set(exclude)\n  else:\n   raise TypeError('exclude kwarg must be iterable')\n else:\n  exclude_set = set()\n return (set([i for i in expression.atoms(AppliedUndef, Derivative) if (i.free_symbols == t_set)]) - exclude_set)",
        "text": "find all dynamicsymbols in expression ."
    },
    {
        "id": 65,
        "code": "def _create_ofb_cipher(factory, **kwargs):\n cipher_state = factory._create_base_cipher(kwargs)\n iv = kwargs.pop('IV', None)\n IV = kwargs.pop('iv', None)\n if ((None, None) == (iv, IV)):\n  iv = get_random_bytes(factory.block_size)\n if (iv is not None):\n  if (IV is not None):\n   raise TypeError(\"You must either use 'iv' or 'IV', not both\")\n else:\n  iv = IV\n if kwargs:\n  raise TypeError(('Unknown parameters for OFB: %s' % str(kwargs)))\n return OfbMode(cipher_state, iv)",
        "text": "instantiate a cipher object that performs ofb encryption/decryption ."
    },
    {
        "id": 66,
        "code": "def init(mpstate):\n return CmdlongModule(mpstate)",
        "text": "initialise module ."
    },
    {
        "id": 67,
        "code": "def endit():\n end = clock()\n total = (end - START)\n print('Completion time: {0} seconds.'.format(total))",
        "text": "times how long it took for this script to run ."
    },
    {
        "id": 68,
        "code": "def get_isnan(dtype):\n if isinstance(dtype, (types.Float, types.Complex)):\n  return np.isnan\n else:\n  @register_jitable\n  def _trivial_isnan(x):\n   return False\n  return _trivial_isnan",
        "text": "a generic isnan() function ."
    },
    {
        "id": 69,
        "code": "def Element(tag, *args, **kw):\n if ('{' not in tag):\n  tag = ('{%s}%s' % (atom_ns, tag))\n return atom_parser.makeelement(tag, *args, **kw)",
        "text": "create an atom element ."
    },
    {
        "id": 70,
        "code": "def make_choices(choices):\n return list(zip(choices, choices))",
        "text": "zips a list with itself for field choices ."
    },
    {
        "id": 71,
        "code": "@public\ndef pdiv(f, g, *gens, **args):\n options.allowed_flags(args, ['polys'])\n try:\n  ((F, G), opt) = parallel_poly_from_expr((f, g), *gens, **args)\n except PolificationFailed as exc:\n  raise ComputationFailed('pdiv', 2, exc)\n (q, r) = F.pdiv(G)\n if (not opt.polys):\n  return (q.as_expr(), r.as_expr())\n else:\n  return (q, r)",
        "text": "compute polynomial pseudo-division of f and g ."
    },
    {
        "id": 72,
        "code": "def count_values(expr, sort=True):\n result = by(expr, count=expr.count())\n if sort:\n  result = result.sort('count', ascending=False)\n return result",
        "text": "count occurrences of elements in this column sort by counts by default add sort=false keyword to avoid this behavior ."
    },
    {
        "id": 73,
        "code": "def yaml_dump(object):\n yaml = get_yaml()\n return yaml.dump(object, Dumper=yaml.RoundTripDumper, block_seq_indent=2, default_flow_style=False, indent=2)",
        "text": "dump object to string ."
    },
    {
        "id": 74,
        "code": "def get_action_libs_abs_path(pack=None, entry_point=None):\n entry_point_abs_path = get_entry_point_abs_path(pack=pack, entry_point=entry_point)\n if (entry_point_abs_path is not None):\n  return os.path.join(os.path.dirname(entry_point_abs_path), ACTION_LIBS_DIR)\n else:\n  return None",
        "text": "return full absolute path of libs for an action ."
    },
    {
        "id": 75,
        "code": "def libvlc_video_set_deinterlace(p_mi, psz_mode):\n f = (_Cfunctions.get('libvlc_video_set_deinterlace', None) or _Cfunction('libvlc_video_set_deinterlace', ((1,), (1,)), None, None, MediaPlayer, ctypes.c_char_p))\n return f(p_mi, psz_mode)",
        "text": "enable or disable deinterlace filter ."
    },
    {
        "id": 76,
        "code": "def setup_platform(hass, config, add_devices, discovery_info=None):\n devs = config.get(CONF_DEVICES)\n add_devices([MochadSwitch(hass, mochad.CONTROLLER.ctrl, dev) for dev in devs])\n return True",
        "text": "setup x10 switches over a mochad controller ."
    },
    {
        "id": 77,
        "code": "def hard_sigmoid(x):\n return HardSigmoid()(x)",
        "text": "elementwise hard-sigmoid function ."
    },
    {
        "id": 78,
        "code": "def set_(key, value, profile=None):\n comps = key.split('?')\n path = comps[0]\n key = comps[1]\n return salt.utils.vault.write_(path, key, value, profile=profile)",
        "text": "set a key/value pair in the vault service ."
    },
    {
        "id": 79,
        "code": "def runproc(cmd):\n proc = Popen([cmd], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n (stdoutdata, stderrdata) = proc.communicate()\n return (stdoutdata, stderrdata)",
        "text": "convenience method for executing operating system commands ."
    },
    {
        "id": 80,
        "code": "def convert_unreachable_exception(e, error_format=u'Facebook is unreachable %s'):\n exception_class = map_unreachable_exception(e)\n error_message = (error_format % str(e))\n exception = exception_class(error_message)\n return exception",
        "text": "converts an sslerror ."
    },
    {
        "id": 81,
        "code": "def set_default_encoding_file(file):\n global default_encoding_file\n default_encoding_file = file",
        "text": "set file used to get codec information ."
    },
    {
        "id": 82,
        "code": "def _bytes_to_json(value):\n if isinstance(value, bytes):\n  value = base64.encodestring(value)\n return value",
        "text": "coerce value to an json-compatible representation ."
    },
    {
        "id": 83,
        "code": "def request_from_dict(d, spider=None):\n cb = d['callback']\n if (cb and spider):\n  cb = _get_method(spider, cb)\n eb = d['errback']\n if (eb and spider):\n  eb = _get_method(spider, eb)\n return Request(url=to_native_str(d['url']), callback=cb, errback=eb, method=d['method'], headers=d['headers'], body=d['body'], cookies=d['cookies'], meta=d['meta'], encoding=d['_encoding'], priority=d['priority'], dont_filter=d['dont_filter'])",
        "text": "create request object from a dict ."
    },
    {
        "id": 84,
        "code": "def tile_key(layer, coord, format, path=''):\n path = path.strip('/')\n name = layer.name()\n tile = ('%(zoom)d/%(column)d/%(row)d' % coord.__dict__)\n ext = format.lower()\n return str(('%(path)s/%(name)s/%(tile)s.%(ext)s' % locals()))",
        "text": "return a tile key string ."
    },
    {
        "id": 85,
        "code": "def _get_loc():\n if (LOC_KEY in __context__):\n  return __context__[LOC_KEY]",
        "text": "return the active file location ."
    },
    {
        "id": 86,
        "code": "def token_view(request):\n return HttpResponse(_render_csrf_token_template(request))",
        "text": "a view that uses {% csrf_token %} ."
    },
    {
        "id": 87,
        "code": "def _update_stylesheet(obj):\n get_stylesheet.cache_clear()\n if (not sip.isdeleted(obj)):\n  obj.setStyleSheet(get_stylesheet(obj.STYLESHEET))",
        "text": "update the stylesheet for obj ."
    },
    {
        "id": 88,
        "code": "def get_data_files():\n import sys\n from os.path import join, abspath, dirname, exists, split\n path = abspath(dirname(__file__))\n starting_points = [path]\n if (not path.startswith(sys.prefix)):\n  starting_points.append(sys.prefix)\n for path in starting_points:\n  while (path != '/'):\n   share_jupyter = join(path, 'share', 'jupyter', 'hub')\n   if exists(join(share_jupyter, 'static', 'components')):\n    return share_jupyter\n   (path, _) = split(path)\n return ''",
        "text": "walk up until we find share/jupyter/hub ."
    },
    {
        "id": 89,
        "code": "def token_urlsafe(nbytes=None):\n tok = token_bytes(nbytes)\n return base64.urlsafe_b64encode(tok).rstrip('=').decode('ascii')",
        "text": "return a random url-safe text string ."
    },
    {
        "id": 90,
        "code": "def optimal_mode(data):\n if data.isdigit():\n  return MODE_NUMBER\n if RE_ALPHA_NUM.match(data):\n  return MODE_ALPHA_NUM\n return MODE_8BIT_BYTE",
        "text": "calculate the optimal mode for this chunk of data ."
    },
    {
        "id": 91,
        "code": "def get_rpc_server(target, endpoint):\n serializer = RequestContextSerializer(JsonPayloadSerializer())\n access_policy = dispatcher.DefaultRPCAccessPolicy\n return oslo_messaging.get_rpc_server(TRANSPORT, target, [endpoint], executor='eventlet', serializer=serializer, access_policy=access_policy)",
        "text": "return a configured oslo_messaging rpc server ."
    },
    {
        "id": 92,
        "code": "def test_broadcast_dims():\n test((1, 2, 3))\n test((2, 1, 3))\n test((2, 3, 1))\n test2((1, 2, 3))\n test2((2, 1, 3))\n test2((2, 3, 1))",
        "text": "test with some dimensions being 1 ."
    },
    {
        "id": 93,
        "code": "def dnn_gradweight(img, topgrad, kerns_shp, border_mode='valid', subsample=(1, 1), conv_mode='conv'):\n img = gpu_contiguous(img)\n topgrad = gpu_contiguous(topgrad)\n kerns_shp = theano.tensor.as_tensor_variable(kerns_shp)\n desc = GpuDnnConvDesc(border_mode=border_mode, subsample=subsample, conv_mode=conv_mode)(img.shape, kerns_shp)\n out = gpu_alloc_empty(*kerns_shp)\n return GpuDnnConvGradW()(img, topgrad, out, desc)",
        "text": "gpu convolution gradient with respect to weight using cudnn from nvidia ."
    },
    {
        "id": 94,
        "code": "def script(vm_):\n deploy_script = salt.utils.cloud.os_script(config.get_cloud_config_value('script', vm_, __opts__), vm_, __opts__, salt.utils.cloud.salt_config_to_yaml(salt.utils.cloud.minion_config(__opts__, vm_)))\n return deploy_script",
        "text": "return the script deployment object ."
    },
    {
        "id": 95,
        "code": "def strip(src_text):\n pattern_text = multi_line_comment\n pattern_text += (u'|' + single_line_comment)\n pattern_text += (u'|' + single_quoted_character)\n pattern_text += (u'|' + double_quoted_string)\n pattern_text += (u'|' + preprocessor_directive)\n pattern = re.compile(pattern_text, (re.M | re.S))\n striped_src_text = pattern.sub(u'', src_text)\n return striped_src_text",
        "text": "strips comments ."
    },
    {
        "id": 96,
        "code": "def libvlc_vlm_add_input(p_instance, psz_name, psz_input):\n f = (_Cfunctions.get('libvlc_vlm_add_input', None) or _Cfunction('libvlc_vlm_add_input', ((1,), (1,), (1,)), None, ctypes.c_int, Instance, ctypes.c_char_p, ctypes.c_char_p))\n return f(p_instance, psz_name, psz_input)",
        "text": "add a medias input mrl ."
    },
    {
        "id": 97,
        "code": "def _get_fragments_phase(frags):\n return [((3 - (x % 3)) % 3) for x in _get_fragments_coord(frags)]",
        "text": "returns the phases of the given list of 3-letter amino acid fragments ."
    },
    {
        "id": 98,
        "code": "def _subs(value):\n subs = {'groupOfNames': ['novaProject']}\n if (value in subs):\n  return ([value] + subs[value])\n return [value]",
        "text": "returns a list of subclass strings ."
    },
    {
        "id": 99,
        "code": "def belongs_to_folder(path, fileName):\n if (not path.endswith(os.path.sep)):\n  path += os.path.sep\n return fileName.startswith(path)",
        "text": "determine if filename is located under path structure ."
    }
]